generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Cliente {
  id_cliente       String                    @id @default(cuid())
  nombre           String
  ruc              String?                   @unique
  email            String                    @unique
  password         String?
  fecha_registro   DateTime                  @default(now())
  certificaciones  String?
  direccion        String?
  email_contacto   String?
  pais             String?
  telefono         String?
  ruc_locked       Boolean                   @default(false)
  email_verificado DateTime?
  chatParticipants ConversationParticipant[]
  messagesSent     Message[]
  productos        Producto[]
}

model Producto {
  id_producto         String   @id @default(uuid())
  proveedor_id        String
  precio_actual       Float    @default(0)
  stock_actual        Int      @default(0)
  estado              String   @default("Activo")
  fecha_actualizacion DateTime @default(now())
  codigo_interno      String
  descripcion         String
  marca               String?
  material            String?
  modelo              String?
  moneda              String   @default("USD")
  norma_tecnica       String?
  tiempo_entrega      String?
  ubicacion_stock     String?
  unidad              String?
  cliente             Cliente  @relation(fields: [proveedor_id], references: [id_cliente])

  @@unique([codigo_interno, proveedor_id], name: "codigo_interno_proveedor_id")
  @@index([proveedor_id, fecha_actualizacion], map: "idx_proveedor_fecha")
}

model RecommendationBatch {
  id             String               @id @default(cuid())
  cliente_id     String
  fecha_analisis DateTime?
  nota_general   String?
  total          Int                  @default(0)
  createdAt      DateTime             @default(now())
  items          RecommendationItem[]

  @@index([cliente_id, createdAt])
}

model RecommendationItem {
  id        String              @id @default(cuid())
  batchId   String
  tipo      String
  mensaje   String
  producto  String?
  prioridad String
  batch     RecommendationBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@index([batchId])
}

// prisma/schema.prisma  (solo el modelo)
model CotizacionParticipacion {
  proveedor_id  String
  fecha         DateTime       @default(now())
  proyecto      String
  accion        String
  resultado     String
  comentario    String?
  sugerencia    String?
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversations Conversation[] @relation("PartConv")

  // NUEVO
  rank_pos      Int?
  rank_total    Int?

  @@index([proveedor_id, fecha], map: "cotip_part_idx_prov_fecha")
  @@index([proyecto, fecha])
  @@index([rank_pos, rank_total])
}


model ProductSearchLog {
  id         String   @id @default(cuid())
  user_email String?
  user_id    String?
  q          String
  marca      String?
  modelo     String?
  material   String?
  key_norm   String
  createdAt  DateTime @default(now())

  @@index([key_norm, createdAt], map: "idx_key_time")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// --- NUEVO: Métricas diarias “cocinadas” para /dashboard/feedback
model QuoteMetricsDaily {
  id                       String   @id @default(cuid())
  proveedor_id             String
  fecha                    DateTime
  total_participaciones    Int
  pct_respuesta_tiempo     Int
  pct_aceptacion           Int
  promedio_calificacion    Float    @default(0)
  tiempo_prom_entrega_dias Int      @default(0)
  pendientes_evaluacion    Int      @default(0)
  createdAt                DateTime @default(now())

  @@unique([proveedor_id, fecha], name: "quote_metrics_unique")
  @@index([proveedor_id, fecha])
}

/// --- NUEVO: Sugerencias textuales derivadas de reglas/LLM sobre cotizaciones
model QuoteSuggestion {
  id           String   @id @default(cuid())
  proveedor_id String
  fecha        DateTime @default(now())
  texto        String
  fuente       String?
  ref_id       String?
  createdAt    DateTime @default(now())

  @@index([proveedor_id, fecha])
}

/// --- NUEVO: Alertas de demanda (separadas de CotizacionParticipacion)
model DemandAlert {
  id           String   @id @default(cuid())
  proveedor_id String
  fecha        DateTime
  filtro       String
  comentario   String?
  sugerencia   String?
  createdAt    DateTime @default(now())

  @@index([proveedor_id, fecha])
}

/// --- OPCIONAL (recomendado): tracking de jobs n8n (refresh, cron, etc.)
model Job {
  id         String    @id
  tipo       String
  owner_id   String?
  status     String
  startedAt  DateTime  @default(now())
  finishedAt DateTime?
  error      String?
}

model Conversation {
  id              String                    @id @default(cuid())
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  participationId String?                   @db.Uuid
  participation   CotizacionParticipacion?  @relation("PartConv", fields: [participationId], references: [id])
  participants    ConversationParticipant[]
  messages        Message[]

  @@index([participationId])
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           Cliente      @relation(fields: [userId], references: [id_cliente], onDelete: Cascade)

  @@unique([conversationId, userId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  body           String
  createdAt      DateTime     @default(now())
  readAt         DateTime?
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         Cliente      @relation(fields: [senderId], references: [id_cliente], onDelete: SetNull)

  @@index([conversationId, createdAt])
  @@index([conversationId, readAt])
}


model RecentSuggestion {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  proveedor_id String
  created_at   DateTime @default(now())
  proyecto     String?
  comentario   String?
  sugerencia   String

  @@index([proveedor_id, created_at])
}
