// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Cliente {
  id_cliente      String   @id @default(cuid())
  nombre          String
  ruc             String?  @unique
  email           String   @unique
  password        String?
  fecha_registro  DateTime @default(now())

  telefono        String?
  direccion       String?
  pais            String?
  email_contacto  String?
  certificaciones String?

  ruc_locked      Boolean  @default(false)

  productos       Producto[]
}

model Producto {
  id_producto          String   @id @default(uuid())
  proveedor_id         String

  // Relación con Cliente
  cliente              Cliente  @relation(fields: [proveedor_id], references: [id_cliente], onDelete: Restrict, onUpdate: Cascade)

  codigo_interno       String
  descripcion          String
  marca                String?
  modelo               String?
  material             String?
  norma_tecnica        String?
  unidad               String?
  stock_actual         Int      @default(0)
  precio_actual        Float    @default(0)
  moneda               String   @default("USD")
  tiempo_entrega       String?
  ubicacion_stock      String?
  estado               String   @default("Activo")
  fecha_actualizacion  DateTime @default(now())

  @@unique([codigo_interno, proveedor_id], name: "codigo_interno_proveedor_id")
  @@index([proveedor_id, fecha_actualizacion], name: "idx_proveedor_fecha")
}

model RecommendationBatch {
  id             String               @id @default(cuid())
  cliente_id     String
  fecha_analisis DateTime?
  nota_general   String?
  total          Int                  @default(0)
  createdAt      DateTime             @default(now())
  items          RecommendationItem[]

  // (Opcional) si querés FK a Cliente, descomentá estas 2 líneas y la backrelation en Cliente
  // cliente       Cliente  @relation(fields: [cliente_id], references: [id_cliente], onDelete: Restrict)

  @@index([cliente_id, createdAt])
}

model RecommendationItem {
  id        String   @id @default(cuid())
  batchId   String
  tipo      String   // "precio" | "stock" | "perfil"
  mensaje   String
  producto  String?
  prioridad String   // "alta" | "media" | "baja"

  batch     RecommendationBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@index([batchId])
}

model CotizacionParticipacion {
  id           String   @id @default(uuid())
  proveedor_id String
  fecha        DateTime @default(now())
  proyecto     String
  accion       String
  resultado    String
  comentario   String?
  sugerencia   String?
}

model ProductSearchLog {
  id         String   @id @default(cuid())
  user_email String?
  user_id    String?
  q          String
  marca      String?
  modelo     String?
  material   String?
  key_norm   String   // hash/llave normalizada de los filtros
  createdAt  DateTime @default(now())

  @@index([key_norm, createdAt], name: "idx_key_time")
}

/* ===========================
   MODELOS REQUERIDOS POR NEXTAUTH
   (para Google OAuth y sesiones)
   =========================== */

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
